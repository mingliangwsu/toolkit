# -*- coding: utf-8 -*-
"""CanopyCover.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lSbM_DUb8mXiM-njhUfxwIfZb7WBOv7V
"""

import math

def CC(B1, B2, Value_ini, Value_max, Asymthotic_Value_Decline, Value_end, Current_Value, DOY,
    DOY_Begin_Season, DOY_Peak_Value, DOY_Begin_Decline, DOY_End_Season, Shape_Coef_Before_Peak, Shape_Coef_During_Decline,
    Actual_Value_max2):
    if DOY <= DOY_Peak_Value:
        Relative_TT_Increasing_Value = (DOY - DOY_Begin_Season) / (DOY_Peak_Value - DOY_Begin_Season)
        CC = Value_ini + (Value_max - Value_ini) / (1 + B1 * math.exp(-Shape_Coef_Before_Peak * Relative_TT_Increasing_Value))
    else:
        if DOY <= DOY_End_Season and DOY >= DOY_Begin_Decline:
            Relative_TT_Declining_Value = (DOY - DOY_Begin_Decline) / (DOY_End_Season - DOY_Begin_Decline)
            CC = Actual_Value_max2 - (Actual_Value_max2 - Asymthotic_Value_Decline) / (1 + B2 * math.exp(-Shape_Coef_During_Decline * Relative_TT_Declining_Value))
            if CC < Value_end: CC = Value_end
            if CC > Actual_Value_max2: CC = Actual_Value_max2
        else:
            CC = Current_Value
    return CC

def get_CC_parameters(Shape_Coef_Before_Peak,Shape_Coef_During_Decline,
                      Initial_Value,Peak_Value,End_Season_Value,Time_Fraction_At_Half_Peak_Value,
                      Time_Fraction_At_Half_Decline,DOY_Begin_Season,DOY_Peak_Value,
                      DOY_Begin_Decline,DOY_End_Of_Season):
    #'Derived parameters for the standard green canopy curve
    B1 = 1 / math.exp(-Shape_Coef_Before_Peak * Time_Fraction_At_Half_Peak_Value)
    B2 = 1 / math.exp(-Shape_Coef_During_Decline * Time_Fraction_At_Half_Decline)
    Asympthotic_Value_max = (Peak_Value - Initial_Value) * (1 + B1 * math.exp(-Shape_Coef_Before_Peak * 1)) + Initial_Value
    Actual_Value_max1 = Initial_Value + (Asympthotic_Value_max - Initial_Value) / (1 + B1 * math.exp(-Shape_Coef_Before_Peak))
    Actual_Value_max2 = (Actual_Value_max1 * (1 + B2) - End_Season_Value) / B2
    Asymthotic_Value_Decline = Actual_Value_max2 + (End_Season_Value - Actual_Value_max2) * (1 + B2 * math.exp(-Shape_Coef_During_Decline))
    return B1,B2,Asympthotic_Value_max,Actual_Value_max1,Actual_Value_max2,Asymthotic_Value_Decline

def GreenCanopyCover(Shape_Coef_Before_Peak,Shape_Coef_During_Decline,
                     Initial_Value,Peak_Value,End_Season_Value,DOY_Begin_Season,
                     DOY_Peak_Value,DOY_Begin_Decline,DOY_End_Of_Season,B1,B2,
                     Asympthotic_Value_max,Actual_Value_max1,Actual_Value_max2,
                     Asymthotic_Value_Decline,DOY):
    if DOY == DOY_Begin_Season: # 'CANOPY COVER INITILIZED THE DAY OF EMERGENCE
            Today_GCC_Value = Initial_Value
    else:
        if DOY <= DOY_End_Of_Season:
            if DOY > DOY_Begin_Decline:
                #'This recalculate Value_max2 and Asymthotic_Value_Decline at the beginning of senescence
                Actual_Value_max2 = (Peak_Value * (1 + B2) - End_Season_Value) / B2
                Asymthotic_Value_Decline = Actual_Value_max2 + (End_Season_Value - Actual_Value_max2) * (1 + B2 * math.exp(-Shape_Coef_During_Decline))

            Today_GCC_Value = CC(B1, B2, Initial_Value, Asympthotic_Value_max, Asymthotic_Value_Decline, End_Season_Value, Peak_Value, DOY,
                    DOY_Begin_Season, DOY_Peak_Value, DOY_Begin_Decline, DOY_End_Of_Season, Shape_Coef_Before_Peak, Shape_Coef_During_Decline, Actual_Value_max2)
    return Today_GCC_Value

